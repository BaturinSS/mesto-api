{
	"info": {
		"_postman_id": "f38e7091-24c6-43c2-a0ca-ab75834e95dd",
		"name": "Mesto server my node.js",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21745971"
	},
	"item": [
		{
			"name": "localhost:3000",
			"item": [
				{
					"name": "/",
					"item": [
						{
							"name": "POST",
							"item": [
								{
									"name": "app  (  '  /signin  '  , login  )",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"password\": \"12345678\",\r\n    \"email\": \"ya@ufan2f3fde52x.ru\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:3000/signin",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"signin"
											]
										}
									},
									"response": []
								},
								{
									"name": "app  (  '  /signup  '  , createUser  )",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"password\": \"12345678\",\r\n    \"email\": \"ya@ufan2f3de52x.ru\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:3000/signup",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"signup"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "/users",
					"item": [
						{
							"name": "GET",
							"item": [
								{
									"name": "router  (  ' / '  ,   getUsers  )",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:3000/users/",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "router  (  '  /me  '  , getUserInfo  )",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:3000/users/me",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "router  (  '  / : id  '  , getUser  )",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:3000/users/62c7624e57d33075db13abf0",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"62c7624e57d33075db13abf0"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PATCH",
							"item": [
								{
									"name": "router  (  '  /me  '  , updateUser  )",
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Сергей\",\r\n    \"about\": \"Мастер\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:3000/users/me",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "router (  '  /me/avatar  '  , updateUserAvatar  )",
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"avatar\": \"https://eurolux-rostov.ru/wp-content/uploads/2020/07/Monte_Carlo.jpg\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:3000/users/me/avatar",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"me",
												"avatar"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "/cards",
					"item": [
						{
							"name": "GET",
							"item": [
								{
									"name": "router  (  '  /  '  , getCards  )",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:3000/cards",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"cards"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "POST",
							"item": [
								{
									"name": "router  (  '  /  '  , createCard  )",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Н. Новгород\",\r\n    \"link\": \"https://www.avtodispetcher.ru/wp-content/gallery/nizhny-novgorod/5682852_xlarge.jpg\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:3000/cards/",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"cards",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PUT",
							"item": [
								{
									"name": "router  (  '  / : cardId / likes  '  , likeCard  )",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "http://localhost:3000/cards/62c6dbdabbbb5e6a641da59e/likes",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"cards",
												"62c6dbdabbbb5e6a641da59e",
												"likes"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "DEL",
							"item": [
								{
									"name": "router  (  '  / : cardId  ' , deleteCard  )",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://localhost:3000/cards/62c7735d9cdf52c1a6c6b94f",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"cards",
												"62c7735d9cdf52c1a6c6b94f"
											]
										}
									},
									"response": []
								},
								{
									"name": "router  (  '  / : cardId / likes  '  , dislikeCard  )",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://localhost:3000/cards/62c6dbdabbbb5e6a641da59e/likes",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"cards",
												"62c6dbdabbbb5e6a641da59e",
												"likes"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "51.250.18.115:3000",
			"item": [
				{
					"name": "/",
					"item": [
						{
							"name": "POST",
							"item": [
								{
									"name": "app  (  '  /signin  '  , login  )",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"password\": \"12345678\",\r\n    \"email\": \"ya@ufan2f3de52x.ru\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://51.250.18.115:3000/signin",
											"protocol": "http",
											"host": [
												"51",
												"250",
												"18",
												"115"
											],
											"port": "3000",
											"path": [
												"signin"
											]
										}
									},
									"response": []
								},
								{
									"name": "app  (  '  /signup  '  , createUser  )",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"password\": \"12345678\",\r\n    \"email\": \"ya@ufan2f3de52x.ru\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://51.250.18.115:3000/signup",
											"protocol": "http",
											"host": [
												"51",
												"250",
												"18",
												"115"
											],
											"port": "3000",
											"path": [
												"signup"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "/users",
					"item": [
						{
							"name": "GET",
							"item": [
								{
									"name": "router  (  ' / '  ,   getUsers  )",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://51.250.18.115:3000/users/",
											"protocol": "http",
											"host": [
												"51",
												"250",
												"18",
												"115"
											],
											"port": "3000",
											"path": [
												"users",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "router  (  '  /me  '  , getUserInfo  )",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://51.250.18.115:3000/users/me",
											"protocol": "http",
											"host": [
												"51",
												"250",
												"18",
												"115"
											],
											"port": "3000",
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "router  (  '  / : id  '  , getUser  )",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://51.250.18.115:3000/users/62c7624e57d33075db13abf0",
											"protocol": "http",
											"host": [
												"51",
												"250",
												"18",
												"115"
											],
											"port": "3000",
											"path": [
												"users",
												"62c7624e57d33075db13abf0"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PATCH",
							"item": [
								{
									"name": "router  (  '  /me  '  , updateUser  )",
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Сергей\",\r\n    \"about\": \"Мастер\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:3000/users/me",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "router (  '  /me/avatar  '  , updateUserAvatar  )",
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"avatar\": \"https://eurolux-rostov.ru/wp-content/uploads/2020/07/Monte_Carlo.jpg\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:3000/users/me/avatar",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"me",
												"avatar"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "tests",
			"item": [
				{
					"name": "sprint-13",
					"item": [
						{
							"name": "signup",
							"item": [
								{
									"name": "[+] [POST] Добавление пользователя",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Код ответа равен 200 или 201\", () => {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
													"});\r",
													"\r",
													"pm.test(\"Данные в ответе совпадают с переданными\", () => {\r",
													"    const user = utils.getData(pm.response.json());\r",
													"\r",
													"    pm.expect(user.name).to.eql(pm.collectionVariables.get(\"user_name\"));\r",
													"    pm.expect(user.about).to.eql(pm.collectionVariables.get(\"user_about\"));\r",
													"    pm.expect(user.avatar).to.eql(pm.collectionVariables.get(\"user_avatar\"));\r",
													"});\r",
													"\r",
													"pm.test(\"В ответе содержится id созданного пользователя\", () => {\r",
													"    const user = utils.getData(pm.response.json());\r",
													"\r",
													"    pm.expect(user).to.have.property('_id');\r",
													"    \r",
													"    pm.collectionVariables.set(\"user_id\", user._id);\r",
													"});\r",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{user_name}}\",\r\n    \"about\": \"{{user_about}}\",\r\n    \"avatar\": \"{{user_avatar}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/users",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [POST] Добавление пользователя с полем name меньше 2 символов",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Код ответа равен 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Проверка возврата поля message\", () => {\r",
													"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
													"});\r",
													"\r",
													"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
													"    const response = utils.getData(pm.response.json());\r",
													"    \r",
													"    pm.expect(response.message).to.be.a(\"string\")\r",
													"    pm.expect(response.message.length).to.greaterThan(1);\r",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{$randomAlphaNumeric}}\",\r\n    \"about\": \"{{user_about}}\",\r\n    \"avatar\": \"{{user_avatar}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/users",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [POST] Добавление пользователя с полем name больше 30 символов",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Код ответа равен 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Проверка возврата поля message\", () => {\r",
													"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
													"});\r",
													"\r",
													"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
													"    const response = utils.getData(pm.response.json());\r",
													"    \r",
													"    pm.expect(response.message).to.be.a(\"string\")\r",
													"    pm.expect(response.message.length).to.greaterThan(1);\r",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{$randomLoremSentences}}\",\r\n    \"about\": \"{{user_about}}\",\r\n    \"avatar\": \"{{user_avatar}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/users",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [POST] Добавление пользователя с полем about меньше 2 символов",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Код ответа равен 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Проверка возврата поля message\", () => {\r",
													"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
													"});\r",
													"\r",
													"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
													"    const response = utils.getData(pm.response.json());\r",
													"    \r",
													"    pm.expect(response.message).to.be.a(\"string\")\r",
													"    pm.expect(response.message.length).to.greaterThan(1);\r",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{user_name}}\",\r\n    \"about\": \"{{$randomAlphaNumeric}}\",\r\n    \"avatar\": \"{{user_avatar}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/users",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [POST] Добавление пользователя с полем about больше 30 символов",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Код ответа равен 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Проверка возврата поля message\", () => {\r",
													"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
													"});\r",
													"\r",
													"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
													"    const response = utils.getData(pm.response.json());\r",
													"    \r",
													"    pm.expect(response.message).to.be.a(\"string\")\r",
													"    pm.expect(response.message.length).to.greaterThan(1);\r",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{user_name}}\",\r\n    \"about\": \"{{$randomLoremSentences}}\",\r\n    \"avatar\": \"{{user_avatar}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/users",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [POST] Добавление пользователя без обязательного поля name",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Код ответа равен 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Проверка возврата поля message\", () => {\r",
													"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
													"});\r",
													"\r",
													"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
													"    const response = utils.getData(pm.response.json());\r",
													"\r",
													"    pm.expect(response.message).to.be.a(\"string\")\r",
													"    pm.expect(response.message.length).to.greaterThan(1);\r",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"about\": \"{{user_about}}\",\r\n    \"avatar\": \"{{user_avatar}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/users",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [POST] Добавление пользователя без обязательного поля about",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Код ответа равен 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Проверка возврата поля message\", () => {\r",
													"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
													"});\r",
													"\r",
													"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
													"    const response = utils.getData(pm.response.json());\r",
													"\r",
													"    pm.expect(response.message).to.be.a(\"string\")\r",
													"    pm.expect(response.message.length).to.greaterThan(1);\r",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{user_name}}\",\r\n    \"avatar\": \"{{user_avatar}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/users",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [POST] Добавление пользователя без обязательного поля avatar",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Код ответа равен 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Проверка возврата поля message\", () => {\r",
													"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
													"});\r",
													"\r",
													"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
													"    const response = utils.getData(pm.response.json());\r",
													"\r",
													"    pm.expect(response.message).to.be.a(\"string\")\r",
													"    pm.expect(response.message.length).to.greaterThan(1);\r",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{user_name}}\",\r\n    \"about\": \"{{user_about}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/users",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "users",
							"item": [
								{
									"name": "[+] [GET] Получение списка пользователей",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Код ответа равен 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Список пользователей\", () => {\r",
													"    const response = utils.getData(pm.response.json());\r",
													"    pm.expect(response).to.be.an(\"array\");\r",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/users",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "[+] [GET] Получение пользователя по id",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Код ответа равен 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Данные в ответе совпадают с данными добавленного пользователя\", () => {\r",
													"    const user = utils.getData(pm.response.json());\r",
													"\r",
													"    pm.expect(user.name).to.eql(pm.collectionVariables.get(\"user_name\"));\r",
													"    pm.expect(user.about).to.eql(pm.collectionVariables.get(\"user_about\"));\r",
													"    pm.expect(user.avatar).to.eql(pm.collectionVariables.get(\"user_avatar\"));\r",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/users/:userid",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"users",
												":userid"
											],
											"variable": [
												{
													"key": "userid",
													"value": "{{user_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [GET] Получение пользователя с некорректным id",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Код ответа равен 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Проверка возврата поля message\", () => {\r",
													"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
													"});\r",
													"\r",
													"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
													"    const response = utils.getData(pm.response.json());\r",
													"\r",
													"    pm.expect(response.message).to.be.a(\"string\")\r",
													"    pm.expect(response.message.length).to.greaterThan(1);\r",
													"});\r",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/users/:userid",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"users",
												":userid"
											],
											"variable": [
												{
													"key": "userid",
													"value": "text"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [GET] Получение пользователя с несуществующим в БД id",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Код ответа равен 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Проверка возврата поля message\", () => {\r",
													"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
													"});\r",
													"\r",
													"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
													"    const response = utils.getData(pm.response.json());\r",
													"\r",
													"    pm.expect(response.message).to.be.a(\"string\")\r",
													"    pm.expect(response.message.length).to.greaterThan(1);\r",
													"});\r",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/users/:userid",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"users",
												":userid"
											],
											"variable": [
												{
													"key": "userid",
													"value": "{{user_id_const}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[+] [PATCH] Обновление данных пользователя",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Код ответа равен 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Данные в ответе совпадают с данными обновленного пользователя\", () => {\r",
													"    const user = utils.getData(pm.response.json());\r",
													"\r",
													"    pm.expect(user.name).to.eql(pm.collectionVariables.get(\"user_name_changed\"));\r",
													"    pm.expect(user.about).to.eql(pm.collectionVariables.get(\"user_about_changed\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{   \r\n    \"name\": \"{{user_name_changed}}\",\r\n    \"about\": \"{{user_about_changed}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/users/me",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [PATCH] Обновление данных пользователя с полем name меньше 2 символов",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Код ответа равен 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Проверка возврата поля message\", () => {\r",
													"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
													"});\r",
													"\r",
													"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
													"    const response = utils.getData(pm.response.json());\r",
													"    \r",
													"    pm.expect(response.message).to.be.a(\"string\")\r",
													"    pm.expect(response.message.length).to.greaterThan(1);\r",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{   \r\n    \"name\": \"{{$randomAlphaNumeric}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/users/me",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [PATCH] Обновление данных пользователя с полем name больше 30 символов",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Код ответа равен 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Проверка возврата поля message\", () => {\r",
													"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
													"});\r",
													"\r",
													"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
													"    const response = utils.getData(pm.response.json());\r",
													"    \r",
													"    pm.expect(response.message).to.be.a(\"string\")\r",
													"    pm.expect(response.message.length).to.greaterThan(1);\r",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{   \r\n    \"name\": \"{{$randomLoremSentences}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/users/me",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [PATCH] Обновление данных пользователя с полем about меньше 2 символов",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Код ответа равен 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Проверка возврата поля message\", () => {\r",
													"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
													"});\r",
													"\r",
													"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
													"    const response = utils.getData(pm.response.json());\r",
													"    \r",
													"    pm.expect(response.message).to.be.a(\"string\")\r",
													"    pm.expect(response.message.length).to.greaterThan(1);\r",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{   \r\n    \"about\": \"{{$randomAlphaNumeric}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/users/me",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [PATCH] Обновление данных пользователя с полем about больше 30 символов",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Код ответа равен 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Проверка возврата поля message\", () => {\r",
													"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
													"});\r",
													"\r",
													"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
													"    const response = utils.getData(pm.response.json());\r",
													"    \r",
													"    pm.expect(response.message).to.be.a(\"string\")\r",
													"    pm.expect(response.message.length).to.greaterThan(1);\r",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{   \r\n    \"about\": \"{{$randomLoremSentences}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/users/me",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "[+] [PATCH] Обновление аватара пользователя",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Код ответа равен 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Url-адрес аватара в ответе совпадает с url-адресом аватара в запросе\", () => {\r",
													"    const user = utils.getData(pm.response.json());\r",
													"\r",
													"    pm.expect(user.avatar).to.eql(pm.collectionVariables.get(\"user_avatar_changed\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{   \r\n    \"avatar\": \"{{user_avatar_changed}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/users/me/avatar",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"users",
												"me",
												"avatar"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "cards",
							"item": [
								{
									"name": "[+] [POST] Добавление карточки",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Код ответа равен 200 или 201\", () => {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
													"});\r",
													"\r",
													"pm.test(\"В ответе содержится id созданной карточки\", () => {\r",
													"    const card = utils.getData(pm.response.json());\r",
													"\r",
													"    pm.expect(card).to.have.property('_id');\r",
													"\r",
													"    pm.collectionVariables.set(\"card_id\", card._id);\r",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{card_name}}\",\r\n    \"link\": \"{{card_link}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/cards",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"cards"
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [POST] Добавление карточки с полем name меньше 2 символов",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Код ответа равен 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Проверка возврата поля message\", () => {\r",
													"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
													"});\r",
													"\r",
													"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
													"    const response = utils.getData(pm.response.json());\r",
													"\r",
													"    pm.expect(response.message).to.be.a(\"string\")\r",
													"    pm.expect(response.message.length).to.greaterThan(1);\r",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{$randomAlphaNumeric}}\",\r\n    \"link\": \"{{card_link}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/cards",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"cards"
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [POST] Добавление карточки с полем name больше 30 символов",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Код ответа равен 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Проверка возврата поля message\", () => {\r",
													"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
													"});\r",
													"\r",
													"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
													"    const response = utils.getData(pm.response.json());\r",
													"\r",
													"    pm.expect(response.message).to.be.a(\"string\")\r",
													"    pm.expect(response.message.length).to.greaterThan(1);\r",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{$randomLoremSentences}}\",\r\n    \"link\": \"{{card_link}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/cards",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"cards"
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [POST] Добавление карточки без обязательного поля name",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Код ответа равен 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Проверка возврата поля message\", () => {\r",
													"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
													"});\r",
													"\r",
													"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
													"    const response = utils.getData(pm.response.json());\r",
													"\r",
													"    pm.expect(response.message).to.be.a(\"string\")\r",
													"    pm.expect(response.message.length).to.greaterThan(1);\r",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"link\": \"{{card_link}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/cards",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"cards"
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [POST] Добавление карточки без обязательного поля link",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Код ответа равен 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Проверка возврата поля message\", () => {\r",
													"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
													"});\r",
													"\r",
													"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
													"    const response = utils.getData(pm.response.json());\r",
													"\r",
													"    pm.expect(response.message).to.be.a(\"string\")\r",
													"    pm.expect(response.message.length).to.greaterThan(1);\r",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{card_name}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/cards",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"cards"
											]
										}
									},
									"response": []
								},
								{
									"name": "[+] [GET] Получение списка карточек",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Код ответа равен 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Проверка списка карточек\", () => {\r",
													"    const response = utils.getData(pm.response.json());\r",
													"\r",
													"    pm.expect(response).to.be.an(\"array\");\r",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/cards",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"cards"
											]
										}
									},
									"response": []
								},
								{
									"name": "[+] [PUT] Добавление лайка карточке",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Код ответа равен 200 или 201\", () => {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{base_url}}/cards/:cardid/likes",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"cards",
												":cardid",
												"likes"
											],
											"variable": [
												{
													"key": "cardid",
													"value": "{{card_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [PUT] Добавление лайка с некорректным id карточки",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Код ответа равен 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Проверка возврата поля message\", () => {\r",
													"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
													"});\r",
													"\r",
													"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
													"    const response = utils.getData(pm.response.json());\r",
													"\r",
													"    pm.expect(response.message).to.be.a(\"string\")\r",
													"    pm.expect(response.message.length).to.greaterThan(1);\r",
													"});\r",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{base_url}}/cards/:cardid/likes",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"cards",
												":cardid",
												"likes"
											],
											"variable": [
												{
													"key": "cardid",
													"value": "text"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [PUT] Добавление лайка с несуществующим в БД id карточки",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Код ответа равен 404\", () => {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Проверка возврата поля message\", () => {\r",
													"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
													"});\r",
													"\r",
													"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
													"    const response = utils.getData(pm.response.json());\r",
													"\r",
													"    pm.expect(response.message).to.be.a(\"string\")\r",
													"    pm.expect(response.message.length).to.greaterThan(1);\r",
													"});\r",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{base_url}}/cards/:cardid/likes",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"cards",
												":cardid",
												"likes"
											],
											"variable": [
												{
													"key": "cardid",
													"value": "{{user_id_const}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [DELETE] Удаление лайка у карточки с некорректным id",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Код ответа равен 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Проверка возврата поля message\", () => {\r",
													"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
													"});\r",
													"\r",
													"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
													"    const response = utils.getData(pm.response.json());\r",
													"\r",
													"    pm.expect(response.message).to.be.a(\"string\")\r",
													"    pm.expect(response.message.length).to.greaterThan(1);\r",
													"});\r",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{base_url}}/cards/:cardid/likes",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"cards",
												":cardid",
												"likes"
											],
											"variable": [
												{
													"key": "cardid",
													"value": "text"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [DELETE] Удаление лайка у карточки с несуществующим в БД id",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Код ответа равен 404\", () => {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Проверка возврата поля message\", () => {\r",
													"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
													"});\r",
													"\r",
													"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
													"    const response = utils.getData(pm.response.json());\r",
													"\r",
													"    pm.expect(response.message).to.be.a(\"string\")\r",
													"    pm.expect(response.message.length).to.greaterThan(1);\r",
													"});\r",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{base_url}}/cards/:cardid/likes",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"cards",
												":cardid",
												"likes"
											],
											"variable": [
												{
													"key": "cardid",
													"value": "{{user_id_const}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[+] [DELETE] Удаление лайка у карточки",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Код ответа равен 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{base_url}}/cards/:cardid/likes",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"cards",
												":cardid",
												"likes"
											],
											"variable": [
												{
													"key": "cardid",
													"value": "{{card_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[+] [GET] Проверка отсутствия лайка у карточки после его удаления",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Удаленный лайк не должен присутствовать в карточке\", () => {\r",
													"    const cards = utils.getData(pm.response.json());\r",
													"    const userId = pm.collectionVariables.get(\"user_id\");\r",
													"    const cardId = pm.collectionVariables.get(\"card_id\");\r",
													"    const card = cards?.find((item) => item._id === cardId);\r",
													"\r",
													"    pm.expect(!!card?.likes?.includes(userId)).to.eq(false);\r",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/cards",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"cards"
											]
										}
									},
									"response": []
								},
								{
									"name": "[+] [DELETE] Удаление карточки",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Код ответа равен 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{base_url}}/cards/:cardid",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"cards",
												":cardid"
											],
											"variable": [
												{
													"key": "cardid",
													"value": "{{card_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[+] [GET] Проверка отсутствия удаленной карточки в БД",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Удаленной карточки не должно быть в БД\", () => {\r",
													"    const cards = utils.getData(pm.response.json());\r",
													"    const deletedId = pm.collectionVariables.get(\"card_id\");\r",
													"    const hasCard = !!cards?.find((item) => item._id === deletedId);\r",
													"\r",
													"    pm.expect(hasCard).to.eq(false);\r",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/cards",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"cards"
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [DELETE] Удаление карточки с некорректным id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Код ответа равен 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Проверка возврата поля message\", () => {\r",
													"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
													"});\r",
													"\r",
													"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
													"    const response = utils.getData(pm.response.json());\r",
													"    \r",
													"    pm.expect(response.message).to.be.a(\"string\")\r",
													"    pm.expect(response.message.length).to.greaterThan(1);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{base_url}}/cards/:cardid",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"cards",
												":cardid"
											],
											"variable": [
												{
													"key": "cardid",
													"value": "text"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [DELETE] Удаление карточки с несуществующим в БД id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Код ответа равен 404\", () => {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Проверка возврата поля message\", () => {\r",
													"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
													"});\r",
													"\r",
													"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
													"    const response = utils.getData(pm.response.json());\r",
													"    \r",
													"    pm.expect(response.message).to.be.a(\"string\")\r",
													"    pm.expect(response.message.length).to.greaterThan(1);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{base_url}}/cards/:cardid",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"cards",
												":cardid"
											],
											"variable": [
												{
													"key": "cardid",
													"value": "{{user_id_const}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "[-] [PATCH] Обработка неправильного пути",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Код ответа равен 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка возврата поля message\", () => {\r",
											"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
											"    const response = utils.getData(pm.response.json());\r",
											"\r",
											"    pm.expect(response.message).to.be.a(\"string\")\r",
											"    pm.expect(response.message.length).to.greaterThan(1);\r",
											"});\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{base_url}}/404",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"404"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "sprint-14",
					"item": [
						{
							"name": "access",
							"item": [
								{
									"name": "[-] [GET] Защита авторизацией",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Код ответа равен 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Проверка возврата поля message\", () => {\r",
													"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/users",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "signup",
							"item": [
								{
									"name": "[-] [POST] Добавление пользователя с полем name меньше 2 символов",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Код ответа равен 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
													"    const schema = utils.generateSchemaValidationError('body', 'name', pm.response.json());\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{user_password}}\",\r\n    \"name\": \"{{$randomAlphaNumeric}}\",\r\n    \"about\": \"{{user_about}}\",\r\n    \"avatar\": \"{{user_avatar}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/signup",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [POST] Добавление пользователя с полем name больше 30 символов",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Код ответа равен 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
													"    const schema = utils.generateSchemaValidationError('body', 'name', pm.response.json());\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{user_password}}\",\r\n    \"name\": \"{{$randomLoremSentences}}\",\r\n    \"about\": \"{{user_about}}\",\r\n    \"avatar\": \"{{user_avatar}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/signup",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [POST] Добавление пользователя с полем about меньше 2 символов",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Код ответа равен 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
													"    const schema = utils.generateSchemaValidationError('body', 'about', pm.response.json());\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{user_password}}\",\r\n    \"name\": \"{{user_name}}\",\r\n    \"about\": \"{{$randomAlphaNumeric}}\",\r\n    \"avatar\": \"{{user_avatar}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/signup",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [POST] Добавление пользователя с полем about больше 30 символов",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Код ответа равен 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
													"    const schema = utils.generateSchemaValidationError('body', 'about', pm.response.json());\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{user_password}}\",\r\n    \"name\": \"{{user_name}}\",\r\n    \"about\": \"{{$randomLoremSentences}}\",\r\n    \"avatar\": \"{{user_avatar}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/signup",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [POST] Добавление пользователя с некорректным url-адресом в поле avatar",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Код ответа равен 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
													"    const schema = utils.generateSchemaValidationError('body', 'avatar', pm.response.json());\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{user_password}}\",\r\n    \"name\": \"{{user_name}}\",\r\n    \"about\": \"{{user_about}}\",\r\n    \"avatar\": \"{{user_avatar_incorrect}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/signup",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [POST] Добавление пользователя с некорректным email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Код ответа равен 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
													"    const schema = utils.generateSchemaValidationError('body', 'email', pm.response.json());\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{user_email_incorrect}}\",\r\n    \"password\": \"{{user_password}}\",\r\n    \"name\": \"{{user_name}}\",\r\n    \"about\": \"{{user_about}}\",\r\n    \"avatar\": \"{{user_avatar}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/signup",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [POST] Добавление пользователя без обязательного поля email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Код ответа равен 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
													"    const schema = utils.generateSchemaValidationError('body', 'email', pm.response.json());\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"about\": \"{{user_about}}\",\r\n    \"avatar\": \"{{user_avatar}}\",\r\n    \"password\": \"{{user_password}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/signup",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [POST] Добавление пользователя без обязательного поля password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Код ответа равен 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
													"    const schema = utils.generateSchemaValidationError('body', 'password', pm.response.json());\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"about\": \"{{user_about}}\",\r\n    \"avatar\": \"{{user_avatar}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/signup",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"response": []
								},
								{
									"name": "[+] [POST] Добавление пользователя без необязательных полей",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Код ответа равен 200 или 201\", () => {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
													"});\r",
													"\r",
													"pm.test(\"В ответе не содержится password созданного пользователя\", () => {\r",
													"    const user = utils.getData(pm.response.json());\r",
													"\r",
													"    pm.expect(user).not.to.have.property('password');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{user_email_second}}\",\r\n    \"password\": \"{{$randomPassword}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/signup",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"response": []
								},
								{
									"name": "[+] [POST] Добавление пользователя",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Код ответа равен 200 или 201\", () => {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
													"});\r",
													"\r",
													"pm.test(\"Данные в ответе совпадают с переданными\", () => {\r",
													"    const user = utils.getData(pm.response.json());\r",
													"\r",
													"    pm.expect(user.name).to.eql(pm.collectionVariables.get(\"user_name\"));\r",
													"    pm.expect(user.about).to.eql(pm.collectionVariables.get(\"user_about\"));\r",
													"    pm.expect(user.avatar).to.eql(pm.collectionVariables.get(\"user_avatar\"));\r",
													"});\r",
													"\r",
													"pm.test(\"В ответе не содержится password созданного пользователя\", () => {\r",
													"    const user = utils.getData(pm.response.json());\r",
													"\r",
													"    pm.expect(user).not.to.have.property('password');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{user_email}}\",\r\n    \"password\": \"{{user_password}}\",\r\n    \"name\": \"{{user_name}}\",\r\n    \"about\": \"{{user_about}}\",\r\n    \"avatar\": \"{{user_avatar}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/signup",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"response": []
								},
								{
									"name": "* Добавление доп. пользователя для теста добавления пользователя с существующим email в БД",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{user_email_third}}\",\r\n    \"password\": \"{{user_password}}\",\r\n    \"name\": \"{{user_name}}\",\r\n    \"about\": \"{{user_about}}\",\r\n    \"avatar\": \"{{user_avatar}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/signup",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [POST] Добавление пользователя с существующим email в БД",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Код ответа равен 409\", () => {\r",
													"    pm.response.to.have.status(409);\r",
													"});\r",
													"\r",
													"pm.test(\"Проверка возврата поля message\", () => {\r",
													"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{user_email_third}}\",\r\n    \"password\": \"{{user_password}}\",\r\n    \"name\": \"{{user_name}}\",\r\n    \"about\": \"{{user_about}}\",\r\n    \"avatar\": \"{{user_avatar}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/signup",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "users",
							"item": [
								{
									"name": "[+] [GET] Получение информации о пользователе",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Код ответа равен 200\", function () {\r",
													"    pm.expect(pm.response.code).equals(200, \"Убедитесь, что сервер возвращает и принимает JWT-токен одинаково (при возврате cookies - сервер должен извлекать токен из них, если кук нет - из заголовков)\");\r",
													"});\r",
													"\r",
													"pm.test(\"Проверка возврата корректных данных\", () => {\r",
													"    const user = utils.getData(pm.response.json());\r",
													"\r",
													"    pm.expect(user.name).to.eql(pm.collectionVariables.get(\"user_name\"));\r",
													"    pm.expect(user.about).to.eql(pm.collectionVariables.get(\"user_about\"));\r",
													"    pm.expect(user.avatar).to.eql(pm.collectionVariables.get(\"user_avatar\"));\r",
													"    pm.expect(user.email).to.eql(pm.collectionVariables.get(\"user_email\"));\r",
													"});\r",
													"\r",
													"pm.test(\"В ответе отсутствует поле password\", () => {\r",
													"    const user = utils.getData(pm.response.json());\r",
													"\r",
													"    pm.expect(user).not.to.have.property('password');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/users/me",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "[+] [GET] Добавленному пользователю без необязательных полей, присвоены стандартные значения",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Полям name, about и avatar присвоены стандартные значения\", () => {\r",
													"    const users = utils.getData(pm.response.json());\r",
													"    const email = pm.collectionVariables.get(\"user_email_second\");\r",
													"    const user = users?.find((item) => item.email === email);\r",
													"    console.log(user);\r",
													"\r",
													"    pm.expect(user.name).to.eql(pm.collectionVariables.get(\"user_name_default\"));\r",
													"    pm.expect(user.about).to.eql(pm.collectionVariables.get(\"user_about_default\"));\r",
													"    pm.expect(user.avatar).to.eql(pm.collectionVariables.get(\"user_avatar_default\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/users",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "[+] [GET] Получение списка пользователей",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Код ответа равен 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Проверка списка пользователей\", () => {\r",
													"    const users = utils.getData(pm.response.json());\r",
													"    pm.expect(users).to.be.an(\"array\");\r",
													"});\r",
													"\r",
													"pm.test(\"В ответе отсутствует поле password\", () => {\r",
													"    const users = utils.getData(pm.response.json());\r",
													"\r",
													"    pm.expect(users[0]).not.to.have.property('password');\r",
													"});\r",
													"\r",
													"const users = utils.getData(pm.response.json());\r",
													"const email = pm.collectionVariables.get(\"user_email\");\r",
													"const user = users?.find((item) => item.email === email);\r",
													"\r",
													"pm.collectionVariables.set(\"user_id\", user._id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/users",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "[+] [GET] Получение пользователя по id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Код ответа равен 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Данные в ответе совпадают с данными добавленного пользователя\", () => {\r",
													"    const user = utils.getData(pm.response.json());\r",
													"\r",
													"    pm.expect(user.name).to.eql(pm.collectionVariables.get(\"user_name\"));\r",
													"    pm.expect(user.about).to.eql(pm.collectionVariables.get(\"user_about\"));\r",
													"    pm.expect(user.avatar).to.eql(pm.collectionVariables.get(\"user_avatar\"));\r",
													"});\r",
													"\r",
													"pm.test(\"В ответе отсутствует поле password\", () => {\r",
													"    const user = utils.getData(pm.response.json());\r",
													"\r",
													"    pm.expect(user).not.to.have.property('password');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/users/:userid",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"users",
												":userid"
											],
											"variable": [
												{
													"key": "userid",
													"value": "{{user_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [GET] Получение пользователя с некорректным id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Код ответа равен 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
													"    const schema = utils.generateSchemaValidationError('params', null, pm.response.json());\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/users/:userid",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"users",
												":userid"
											],
											"variable": [
												{
													"key": "userid",
													"value": "text"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [GET] Получение пользователя с несуществующим в БД userid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Код ответа равен 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Проверка возврата поля message\", () => {\r",
													"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/users/:id",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{user_id_const}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[+] [PATCH] Обновление данных пользователя",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Код ответа равен 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Данные в ответе совпадают с данными обновленного пользователя\", () => {\r",
													"    const user = utils.getData(pm.response.json());\r",
													"\r",
													"    pm.expect(user.name).to.eql(pm.collectionVariables.get(\"user_name_changed\"));\r",
													"    pm.expect(user.about).to.eql(pm.collectionVariables.get(\"user_about_changed\"));\r",
													"});\r",
													"\r",
													"pm.test(\"В ответе отсутствует поле password\", () => {\r",
													"    const user = utils.getData(pm.response.json());\r",
													"\r",
													"    pm.expect(user).not.to.have.property('password');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{   \r\n    \"name\": \"{{user_name_changed}}\",\r\n    \"about\": \"{{user_about_changed}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/users/me",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [PATCH] Обновление данных пользователя с полем name меньше 2 символов",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Код ответа равен 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
													"    const schema = utils.generateSchemaValidationError('body', 'name', pm.response.json());\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{   \r\n    \"name\": \"{{$randomAlphaNumeric}}\",\r\n    \"about\": \"{{user_about_changed}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/users/me",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [PATCH] Обновление данных пользователя с полем name больше 30 символов",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Код ответа равен 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
													"    const schema = utils.generateSchemaValidationError('body', 'name', pm.response.json());\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{   \r\n    \"name\": \"{{$randomLoremSentences}}\",\r\n    \"about\": \"{{user_about_changed}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/users/me",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [PATCH] Обновление данных пользователя с полем about меньше 2 символов",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Код ответа равен 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
													"    const schema = utils.generateSchemaValidationError('body', 'about', pm.response.json());\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{   \r\n    \"about\": \"{{$randomAlphaNumeric}}\",\r\n    \"name\": \"{{user_name_changed}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/users/me",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [PATCH] Обновление данных пользователя с полем about больше 30 символов",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Код ответа равен 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
													"    const schema = utils.generateSchemaValidationError('body', 'about', pm.response.json());\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{   \r\n    \"about\": \"{{$randomLoremSentences}}\",\r\n    \"name\": \"{{user_name_changed}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/users/me",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "[+] [PATCH] Обновление аватара пользователя",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Код ответа равен 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Url-адрес аватара в ответе совпадает с url-адресом аватара в запросе\", () => {\r",
													"    const user = utils.getData(pm.response.json());\r",
													"    \r",
													"    pm.expect(user.avatar).to.eql(pm.collectionVariables.get(\"user_avatar_changed\"));\r",
													"});\r",
													"\r",
													"pm.test(\"В ответе не содержится password пользователя\", () => {\r",
													"    const user = utils.getData(pm.response.json());\r",
													"\r",
													"    pm.expect(user).not.to.have.property('password');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{   \r\n    \"avatar\": \"{{user_avatar_changed}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/users/me/avatar",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"users",
												"me",
												"avatar"
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [PATCH] Обновление аватара пользователя с некорректным url-адресом",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Код ответа равен 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
													"    const schema = utils.generateSchemaValidationError('body', 'avatar', pm.response.json());\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{   \r\n    \"avatar\": \"{{user_avatar_incorrect}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/users/me/avatar",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"users",
												"me",
												"avatar"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "cards",
							"item": [
								{
									"name": "[+] [POST] Добавление карточки",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Код ответа равен 200 или 201\", () => {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
													"});\r",
													"\r",
													"pm.test(\"В ответе содержится id созданной карточки\", () => {\r",
													"    const card = utils.getData(pm.response.json());\r",
													"\r",
													"    pm.expect(card).to.have.property('_id');\r",
													"\r",
													"    pm.collectionVariables.set(\"card_id\", card._id);\r",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{card_name}}\",\r\n    \"link\": \"{{card_link}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/cards",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"cards"
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [POST] Добавление карточки с полем name меньше 2 символов",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Код ответа равен 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
													"    const schema = utils.generateSchemaValidationError('body', 'name', pm.response.json());\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{$randomAlphaNumeric}}\",\r\n    \"link\": \"{{card_link}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/cards",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"cards"
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [POST] Добавление карточки с полем name больше 30 символов",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Код ответа равен 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
													"    const schema = utils.generateSchemaValidationError('body', 'name', pm.response.json());\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{$randomLoremSentences}}\",\r\n    \"link\": \"{{card_link}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/cards",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"cards"
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [POST] Добавление карточки с некорректным url-адресом в поле link",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Код ответа равен 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
													"    const schema = utils.generateSchemaValidationError('body', 'link', pm.response.json());\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{card_name}}\",\r\n    \"link\": \"{{card_link_incorrect}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/cards",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"cards"
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [POST] Добавление карточки без обязательного поля name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Код ответа равен 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
													"    const schema = utils.generateSchemaValidationError('body', 'name', pm.response.json());\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"link\": \"{{card_link}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/cards",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"cards"
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [POST] Добавление карточки без обязательного поля link",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Код ответа равен 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
													"    const schema = utils.generateSchemaValidationError('body', 'link', pm.response.json());\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{card_name}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/cards",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"cards"
											]
										}
									},
									"response": []
								},
								{
									"name": "[+] [GET] Получение списка карточек",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Код ответа равен 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Проверка списка карточек\", () => {\r",
													"    const response = utils.getData(pm.response.json());\r",
													"    \r",
													"    pm.expect(response).to.be.an(\"array\");\r",
													"    pm.expect(response.length).not.to.equal(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/cards",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"cards"
											]
										}
									},
									"response": []
								},
								{
									"name": "[+] [PUT] Добавление лайка карточке",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Код ответа равен 200 или 201\", () => {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{base_url}}/cards/:cardid/likes",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"cards",
												":cardid",
												"likes"
											],
											"variable": [
												{
													"key": "cardid",
													"value": "{{card_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [PUT] Добавление лайка с некорректным id карточки",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Код ответа равен 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
													"    const schema = utils.generateSchemaValidationError('params', null, pm.response.json());\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{base_url}}/cards/:cardid/likes",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"cards",
												":cardid",
												"likes"
											],
											"variable": [
												{
													"key": "cardid",
													"value": "text"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [PUT] Добавление лайка с несуществующим в БД id карточки",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Код ответа равен 404\", () => {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Проверка возврата поля message\", () => {\r",
													"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{base_url}}/cards/:cardid/likes",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"cards",
												":cardid",
												"likes"
											],
											"variable": [
												{
													"key": "cardid",
													"value": "{{user_id_const}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [DELETE] Удаление лайка у карточки с некорректным id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Код ответа равен 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
													"    const schema = utils.generateSchemaValidationError('params', null, pm.response.json());\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{base_url}}/cards/:cardid/likes",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"cards",
												":cardid",
												"likes"
											],
											"variable": [
												{
													"key": "cardid",
													"value": "text"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [DELETE] Удаление лайка у карточки с несуществующим в БД id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Код ответа равен 404\", () => {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Проверка возврата поля message\", () => {\r",
													"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{base_url}}/cards/:cardid/likes",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"cards",
												":cardid",
												"likes"
											],
											"variable": [
												{
													"key": "cardid",
													"value": "{{user_id_const}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[+] [DELETE] Удаление лайка у карточки",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Код ответа равен 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{base_url}}/cards/:cardid/likes",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"cards",
												":cardid",
												"likes"
											],
											"variable": [
												{
													"key": "cardid",
													"value": "{{card_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[+] [GET] Проверка отсутствия лайка у карточки после его удаления",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Удаленный лайк не должен присутствовать в карточке\", () => {\r",
													"    const cards = utils.getData(pm.response.json());\r",
													"    const userId = pm.collectionVariables.get(\"user_id\");\r",
													"    const cardId = pm.collectionVariables.get(\"card_id\");\r",
													"    const card = cards?.find((item) => item._id === cardId);\r",
													"\r",
													"    pm.expect(!!card?.likes?.includes(userId)).to.eq(false);\r",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/cards",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"cards"
											]
										}
									},
									"response": []
								},
								{
									"name": "[+] [DELETE] Удаление карточки",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Код ответа равен 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{base_url}}/cards/:cardid",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"cards",
												":cardid"
											],
											"variable": [
												{
													"key": "cardid",
													"value": "{{card_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[+] [GET] Проверка отсутствия удаленной карточки в БД",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Удаленной карточки не должно быть в БД\", () => {\r",
													"    const cards = utils.getData(pm.response.json());\r",
													"    const deletedId = pm.collectionVariables.get(\"card_id\");\r",
													"    const hasCard = !!cards?.find((item) => item._id === deletedId);\r",
													"\r",
													"    pm.expect(hasCard).to.eq(false);\r",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/cards",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"cards"
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [DELETE] Удаление карточки с некорректным id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Код ответа равен 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
													"    const schema = utils.generateSchemaValidationError('params', null, pm.response.json());\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{base_url}}/cards/:cardid",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"cards",
												":cardid"
											],
											"variable": [
												{
													"key": "cardid",
													"value": "text"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [DELETE] Удаление карточки с несуществующим в БД id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Код ответа равен 404\", () => {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Проверка возврата поля message\", () => {\r",
													"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{base_url}}/cards/:cardid",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"cards",
												":cardid"
											],
											"variable": [
												{
													"key": "cardid",
													"value": "{{user_id_const}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "* Добавление карточки",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const card = utils.getData(pm.response.json());\r",
													"\r",
													"pm.collectionVariables.set(\"card_id\", card._id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{card_name}}\",\r\n    \"link\": \"{{card_link}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/cards",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"cards"
											]
										}
									},
									"response": []
								},
								{
									"name": "* Авторизация другим пользователем",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    const regex = /^[a-zA-Z0-9\\-_]+?\\.[a-zA-Z0-9\\-_]+?\\.([a-zA-Z0-9\\-_]+)?$/;\r",
													"    const data = utils.getData(pm.response.json());\r",
													"    const token = data.token || data[Object.keys(data)[0]];\r",
													"    if(regex.test(token)) {\r",
													"        pm.collectionVariables.set(\"jwt_token\", token);\r",
													"    }\r",
													"} catch (e) {\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{user_email_third}}\",\r\n    \"password\": \"{{user_password}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/signin",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"signin"
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [DELETE] Удаление карточки другого пользователя",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Код ответа равен 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{base_url}}/cards/:cardid",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"cards",
												":cardid"
											],
											"variable": [
												{
													"key": "cardid",
													"value": "{{card_id}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "signin",
							"item": [
								{
									"name": "[-] [POST] Авторизация с несуществующими email и password в БД",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Код ответа равен 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Проверка возврата поля message\", () => {\r",
													"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"test@test.ru\",\r\n    \"password\": \"12345678\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/signin",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"signin"
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [POST] Авторизация с некорректным полем email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Код ответа равен 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
													"    const schema = utils.generateSchemaValidationError('body', 'email', pm.response.json());\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{user_email_incorrect}}\",\r\n    \"password\": \"{{user_password}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/signin",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"signin"
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [POST] Авторизация без обязательного поля email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Код ответа равен 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
													"    const schema = utils.generateSchemaValidationError('body', 'email', pm.response.json());\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"password\": \"{{user_password}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/signin",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"signin"
											]
										}
									},
									"response": []
								},
								{
									"name": "[-] [POST] Авторизация без обязательного поля password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Код ответа равен 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
													"    const schema = utils.generateSchemaValidationError('body', 'password', pm.response.json());\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{user_email}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/signin",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"signin"
											]
										}
									},
									"response": []
								},
								{
									"name": "[+] [POST] Авторизация",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Код ответа равен 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"try {\r",
													"    const regex = /^[a-zA-Z0-9\\-_]+?\\.[a-zA-Z0-9\\-_]+?\\.([a-zA-Z0-9\\-_]+)?$/;\r",
													"    const data = utils.getData(pm.response.json());\r",
													"    const token = data.token || data[Object.keys(data)[0]];\r",
													"    if(regex.test(token)) {\r",
													"        tests[`Cервер вернул в теле ответа JWT-токен: ${token}`] = true\r",
													"        pm.collectionVariables.set(\"jwt_token\", token);\r",
													"    }\r",
													"} catch (e) {\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{user_email}}\",\r\n    \"password\": \"{{user_password}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/signin",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"signin"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "[-] [PATCH] Обработка неправильного пути",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Код ответа равен 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка возврата поля message\", () => {\r",
											"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{base_url}}/404",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"404"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "sprint-15",
					"item": [
						{
							"name": "Защита авторизацией",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Код ответа равен 401\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([401, 403]);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка возврата поля message\", () => {\r",
											"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")));\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
											"    const response = utils.getData(pm.response.json());\r",
											"    \r",
											"    pm.expect(response.message).to.be.a(\"string\");\r",
											"    pm.expect(response.message.length).to.greaterThan(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/users",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление пользователя с полем name меньше 2 символов",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Код ответа равен 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка возврата поля message\", () => {\r",
											"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
											"    const response = utils.getData(pm.response.json());\r",
											"    \r",
											"    pm.expect(response.message).to.be.a(\"string\")\r",
											"    pm.expect(response.message.length).to.greaterThan(1);\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{user_email}}\",\r\n    \"password\": \"{{user_password}}\",\r\n    \"name\": \"{{$randomAlphaNumeric}}\",\r\n    \"about\": \"{{user_about}}\",\r\n    \"avatar\": \"{{user_avatar}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/signup",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление пользователя с полем name больше 30 символов",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Код ответа равен 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка возврата поля message\", () => {\r",
											"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
											"    const response = utils.getData(pm.response.json());\r",
											"    \r",
											"    pm.expect(response.message).to.be.a(\"string\")\r",
											"    pm.expect(response.message.length).to.greaterThan(1);\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{user_email}}\",\r\n    \"password\": \"{{user_password}}\",\r\n    \"name\": \"{{$randomLoremSentences}}\",\r\n    \"about\": \"{{user_about}}\",\r\n    \"avatar\": \"{{user_avatar}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/signup",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление пользователя с полем about меньше 2 символов",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Код ответа равен 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка возврата поля message\", () => {\r",
											"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
											"    const response = utils.getData(pm.response.json());\r",
											"    \r",
											"    pm.expect(response.message).to.be.a(\"string\")\r",
											"    pm.expect(response.message.length).to.greaterThan(1);\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{user_email}}\",\r\n    \"password\": \"{{user_password}}\",\r\n    \"name\": \"{{user_name}}\",\r\n    \"about\": \"{{$randomAlphaNumeric}}\",\r\n    \"avatar\": \"{{user_avatar}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/signup",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление пользователя с полем about больше 30 символов",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Код ответа равен 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка возврата поля message\", () => {\r",
											"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
											"    const response = utils.getData(pm.response.json());\r",
											"    \r",
											"    pm.expect(response.message).to.be.a(\"string\")\r",
											"    pm.expect(response.message.length).to.greaterThan(1);\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{user_email}}\",\r\n    \"password\": \"{{user_password}}\",\r\n    \"name\": \"{{user_name}}\",\r\n    \"about\": \"{{$randomLoremSentences}}\",\r\n    \"avatar\": \"{{user_avatar}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/signup",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление пользователя с некорректным url-адресом в поле avatar",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Код ответа равен 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка возврата поля message\", () => {\r",
											"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
											"    const response = utils.getData(pm.response.json());\r",
											"    \r",
											"    pm.expect(response.message).to.be.a(\"string\")\r",
											"    pm.expect(response.message.length).to.greaterThan(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{user_email}}\",\r\n    \"password\": \"{{user_password}}\",\r\n    \"name\": \"{{user_name}}\",\r\n    \"about\": \"{{user_about}}\",\r\n    \"avatar\": \"{{user_avatar_incorrect}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/signup",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление пользователя с некорректным email",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Код ответа равен 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка возврата поля message\", () => {\r",
											"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
											"    const response = utils.getData(pm.response.json());\r",
											"    \r",
											"    pm.expect(response.message).to.be.a(\"string\")\r",
											"    pm.expect(response.message.length).to.greaterThan(1);\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{user_email_incorrect}}\",\r\n    \"password\": \"{{user_password}}\",\r\n    \"name\": \"{{user_name}}\",\r\n    \"about\": \"{{user_about}}\",\r\n    \"avatar\": \"{{user_avatar}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/signup",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление пользователя без обязательного поля email",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Код ответа равен 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка возврата поля message\", () => {\r",
											"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
											"    const response = utils.getData(pm.response.json());\r",
											"    \r",
											"    pm.expect(response.message).to.be.a(\"string\")\r",
											"    pm.expect(response.message.length).to.greaterThan(1);\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"about\": \"{{user_about}}\",\r\n    \"avatar\": \"{{user_avatar}}\",\r\n    \"password\": \"{{user_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/signup",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление пользователя без обязательного поля password",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Код ответа равен 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка возврата поля message\", () => {\r",
											"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
											"    const response = utils.getData(pm.response.json());\r",
											"    \r",
											"    pm.expect(response.message).to.be.a(\"string\")\r",
											"    pm.expect(response.message.length).to.greaterThan(1);\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{user_email}}\",\r\n    \"about\": \"{{user_about}}\",\r\n    \"avatar\": \"{{user_avatar}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/signup",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление пользователя без необязательных полей",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Код ответа равен 200 или 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Полям name, about и аватар присвоены стандартные значения\", () => {\r",
											"    const user = utils.getData(pm.response.json());\r",
											"\r",
											"    pm.expect(user.email).to.eql(pm.collectionVariables.get(\"user_email_second\"));\r",
											"    pm.expect(user.name).to.eql(pm.collectionVariables.get(\"user_name_default\"));\r",
											"    pm.expect(user.about).to.eql(pm.collectionVariables.get(\"user_about_default\"));\r",
											"    pm.expect(user.avatar).to.eql(pm.collectionVariables.get(\"user_avatar_default\"));\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{user_email_second}}\",\r\n    \"password\": \"{{user_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/signup",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление пользователя",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Код ответа равен 200 или 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе совпадают с переданными\", () => {\r",
											"    const user = utils.getData(pm.response.json());\r",
											"\r",
											"    pm.expect(user.name).to.eql(pm.collectionVariables.get(\"user_name\"));\r",
											"    pm.expect(user.about).to.eql(pm.collectionVariables.get(\"user_about\"));\r",
											"    pm.expect(user.avatar).to.eql(pm.collectionVariables.get(\"user_avatar\"));\r",
											"});\r",
											"\r",
											"pm.test(\"В ответе содержится id созданного пользователя\", () => {\r",
											"    const user = utils.getData(pm.response.json());\r",
											"\r",
											"    pm.expect(user).to.have.property('_id');\r",
											"    \r",
											"    pm.collectionVariables.set(\"user_id\", user._id);\r",
											"});\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{user_email}}\",\r\n    \"password\": \"{{user_password}}\",\r\n    \"name\": \"{{user_name}}\",\r\n    \"about\": \"{{user_about}}\",\r\n    \"avatar\": \"{{user_avatar}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/signup",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление пользователя с существующим email в БД",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Код ответа равен 409\", () => {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка возврата поля message\", () => {\r",
											"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
											"    const response = utils.getData(pm.response.json());\r",
											"    \r",
											"    pm.expect(response.message).to.be.a(\"string\")\r",
											"    pm.expect(response.message.length).to.greaterThan(1);\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{user_email}}\",\r\n    \"password\": \"{{user_password}}\",\r\n    \"name\": \"{{user_name}}\",\r\n    \"about\": \"{{user_about}}\",\r\n    \"avatar\": \"{{user_avatar}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/signup",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "Авторизация с несуществующими email и password в БД",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Код ответа равен 400 или 401\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400, 401]);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка возврата поля message\", () => {\r",
											"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
											"    const response = utils.getData(pm.response.json());\r",
											"    \r",
											"    pm.expect(response.message).to.be.a(\"string\")\r",
											"    pm.expect(response.message.length).to.greaterThan(1);\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"test@test.ru\",\r\n    \"password\": \"123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/signin",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"signin"
									]
								}
							},
							"response": []
						},
						{
							"name": "Авторизация с некорректным полем email",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Код ответа равен 400 или 401\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400, 401]);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка возврата поля message\", () => {\r",
											"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
											"    const response = utils.getData(pm.response.json());\r",
											"    \r",
											"    pm.expect(response.message).to.be.a(\"string\")\r",
											"    pm.expect(response.message.length).to.greaterThan(1);\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{user_email_incorrect}}\",\r\n    \"password\": \"{{user_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/signin",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"signin"
									]
								}
							},
							"response": []
						},
						{
							"name": "Авторизация без обязательного поля email",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Код ответа равен 400 или 401\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400, 401]);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка возврата поля message\", () => {\r",
											"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
											"    const response = utils.getData(pm.response.json());\r",
											"    \r",
											"    pm.expect(response.message).to.be.a(\"string\")\r",
											"    pm.expect(response.message.length).to.greaterThan(1);\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"password\": \"{{user_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/signin",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"signin"
									]
								}
							},
							"response": []
						},
						{
							"name": "Авторизация без обязательного поля password",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Код ответа равен 400 или 401\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400, 401]);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка возврата поля message\", () => {\r",
											"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
											"    const response = utils.getData(pm.response.json());\r",
											"    \r",
											"    pm.expect(response.message).to.be.a(\"string\")\r",
											"    pm.expect(response.message.length).to.greaterThan(1);\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{user_email}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/signin",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"signin"
									]
								}
							},
							"response": []
						},
						{
							"name": "Авторизация",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Код ответа равен 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = utils.getData(pm.response.json());\r",
											"\r",
											"pm.collectionVariables.set(\"token\", response.token);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{user_email}}\",\r\n    \"password\": \"{{user_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/signin",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"signin"
									]
								}
							},
							"response": []
						},
						{
							"name": "Обработка неправильного пути",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Код ответа равен 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка возврата поля message\", () => {\r",
											"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
											"    const response = utils.getData(pm.response.json());\r",
											"    \r",
											"    pm.expect(response.message).to.be.a(\"string\")\r",
											"    pm.expect(response.message.length).to.greaterThan(1);\r",
											"});\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{base_url}}/404",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"404"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение информации о пользователе",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Код ответа равен 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка возврата корректных данных\", () => {\r",
											"    const user = utils.getData(pm.response.json());\r",
											"\r",
											"    pm.expect(user.name).to.eql(pm.collectionVariables.get(\"user_name\"));\r",
											"    pm.expect(user.about).to.eql(pm.collectionVariables.get(\"user_about\"));\r",
											"    pm.expect(user.avatar).to.eql(pm.collectionVariables.get(\"user_avatar\"));\r",
											"    pm.expect(user.email).to.eql(pm.collectionVariables.get(\"user_email\"));\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/users/me",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение списка пользователей",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Код ответа равен 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка списка пользователей\", () => {\r",
											"    const response = utils.getData(pm.response.json());\r",
											"    \r",
											"    pm.expect(response).to.be.an(\"array\");\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/users",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение пользователя по id",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Код ответа равен 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе совпадают с данными добавленного пользователя\", () => {\r",
											"    const user = utils.getData(pm.response.json());\r",
											"    \r",
											"    pm.expect(user.name).to.eql(pm.collectionVariables.get(\"user_name\"));\r",
											"    pm.expect(user.about).to.eql(pm.collectionVariables.get(\"user_about\"));\r",
											"    pm.expect(user.avatar).to.eql(pm.collectionVariables.get(\"user_avatar\"));\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/users/:userid",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"users",
										":userid"
									],
									"variable": [
										{
											"key": "userid",
											"value": "{{user_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение пользователя с некорректным id",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Код ответа равен 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка возврата поля message\", () => {\r",
											"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
											"    const response = utils.getData(pm.response.json());\r",
											"\r",
											"    pm.expect(response.message).to.be.a(\"string\")\r",
											"    pm.expect(response.message.length).to.greaterThan(1);\r",
											"});\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/users/:userid",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"users",
										":userid"
									],
									"variable": [
										{
											"key": "userid",
											"value": "text"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение пользователя с несуществующим в БД id",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Код ответа равен 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка возврата поля message\", () => {\r",
											"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
											"    const response = utils.getData(pm.response.json());\r",
											"    \r",
											"    pm.expect(response.message).to.be.a(\"string\")\r",
											"    pm.expect(response.message.length).to.greaterThan(1);\r",
											"});\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/users/:id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{user_id_const}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление данных пользователя",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Код ответа равен 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе совпадают с данными обновленного пользователя\", () => {\r",
											"    const user = utils.getData(pm.response.json());\r",
											"\r",
											"    pm.expect(user.name).to.eql(pm.collectionVariables.get(\"user_name_changed\"));\r",
											"    pm.expect(user.about).to.eql(pm.collectionVariables.get(\"user_about_changed\"));\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"name\": \"{{user_name_changed}}\",\r\n    \"about\": \"{{user_about_changed}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/users/me",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление данных пользователя с полем name меньше 2 символов",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Код ответа равен 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка возврата поля message\", () => {\r",
											"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
											"    const response = utils.getData(pm.response.json());\r",
											"    \r",
											"    pm.expect(response.message).to.be.a(\"string\")\r",
											"    pm.expect(response.message.length).to.greaterThan(1);\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"name\": \"{{$randomAlphaNumeric}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/users/me",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление данных пользователя с полем name больше 30 символов",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Код ответа равен 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка возврата поля message\", () => {\r",
											"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
											"    const response = utils.getData(pm.response.json());\r",
											"    \r",
											"    pm.expect(response.message).to.be.a(\"string\")\r",
											"    pm.expect(response.message.length).to.greaterThan(1);\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"name\": \"{{$randomLoremSentences}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/users/me",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление данных пользователя с полем about меньше 2 символов",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Код ответа равен 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка возврата поля message\", () => {\r",
											"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
											"    const response = utils.getData(pm.response.json());\r",
											"    \r",
											"    pm.expect(response.message).to.be.a(\"string\")\r",
											"    pm.expect(response.message.length).to.greaterThan(1);\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"about\": \"{{$randomAlphaNumeric}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/users/me",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление данных пользователя с полем about больше 30 символов",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Код ответа равен 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка возврата поля message\", () => {\r",
											"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
											"    const response = utils.getData(pm.response.json());\r",
											"    \r",
											"    pm.expect(response.message).to.be.a(\"string\")\r",
											"    pm.expect(response.message.length).to.greaterThan(1);\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"about\": \"{{$randomLoremSentences}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/users/me",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление аватара пользователя",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Код ответа равен 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Url-адрес аватара в ответе совпадает с url-адресом аватара в запросе\", () => {\r",
											"    const user = utils.getData(pm.response.json());\r",
											"    pm.expect(user.avatar).to.eql(pm.collectionVariables.get(\"user_avatar_changed\"));\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"avatar\": \"{{user_avatar_changed}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/users/me/avatar",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"users",
										"me",
										"avatar"
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление аватара пользователя с некорректным url-адресом",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Код ответа равен 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка возврата поля message\", () => {\r",
											"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
											"    const response = utils.getData(pm.response.json());\r",
											"    \r",
											"    pm.expect(response.message).to.be.a(\"string\")\r",
											"    pm.expect(response.message.length).to.greaterThan(1);\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"avatar\": \"{{user_avatar_incorrect}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/users/me/avatar",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"users",
										"me",
										"avatar"
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление карточки",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Код ответа равен 200 или 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"pm.test(\"В ответе содержится id созданной карточки\", () => {\r",
											"    const card = utils.getData(pm.response.json());\r",
											"\r",
											"    pm.expect(card).to.have.property('_id');\r",
											"\r",
											"    pm.collectionVariables.set(\"card_id\", card._id);\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{card_name}}\",\r\n    \"link\": \"{{card_link}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/cards",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cards"
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление карточки с полем name меньше 2 символов",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Код ответа равен 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка возврата поля message\", () => {\r",
											"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
											"    const response = utils.getData(pm.response.json());\r",
											"\r",
											"    pm.expect(response.message).to.be.a(\"string\")\r",
											"    pm.expect(response.message.length).to.greaterThan(1);\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomAlphaNumeric}}\",\r\n    \"link\": \"{{card_link}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/cards",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cards"
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление карточки с полем name больше 30 символов",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Код ответа равен 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка возврата поля message\", () => {\r",
											"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
											"    const response = utils.getData(pm.response.json());\r",
											"\r",
											"    pm.expect(response.message).to.be.a(\"string\")\r",
											"    pm.expect(response.message.length).to.greaterThan(1);\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomLoremSentences}}\",\r\n    \"link\": \"{{card_link}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/cards",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cards"
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление карточки с некорректным url-адресом в поле link",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Код ответа равен 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка возврата поля message\", () => {\r",
											"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
											"    const response = utils.getData(pm.response.json());\r",
											"    \r",
											"    pm.expect(response.message).to.be.a(\"string\")\r",
											"    pm.expect(response.message.length).to.greaterThan(1);\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{card_name}}\",\r\n    \"link\": \"{{card_link_incorrect}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/cards",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cards"
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление карточки без обязательного поля name",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Код ответа равен 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка возврата поля message\", () => {\r",
											"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
											"    const response = utils.getData(pm.response.json());\r",
											"\r",
											"    pm.expect(response.message).to.be.a(\"string\")\r",
											"    pm.expect(response.message.length).to.greaterThan(1);\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"link\": \"{{card_link}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/cards",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cards"
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление карточки без обязательного поля link",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Код ответа равен 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка возврата поля message\", () => {\r",
											"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
											"    const response = utils.getData(pm.response.json());\r",
											"\r",
											"    pm.expect(response.message).to.be.a(\"string\")\r",
											"    pm.expect(response.message.length).to.greaterThan(1);\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{card_name}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/cards",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cards"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение списка карточек",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Код ответа равен 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка списка карточек\", () => {\r",
											"    const response = utils.getData(pm.response.json());\r",
											"    \r",
											"    pm.expect(response).to.be.an(\"array\");\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/cards",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cards"
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление лайка карточке",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Код ответа равен 200 или 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{base_url}}/cards/:cardid/likes",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cards",
										":cardid",
										"likes"
									],
									"variable": [
										{
											"key": "cardid",
											"value": "{{card_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление лайка с некорректным id карточки",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Код ответа равен 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка возврата поля message\", () => {\r",
											"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
											"    const response = utils.getData(pm.response.json());\r",
											"    \r",
											"    pm.expect(response.message).to.be.a(\"string\")\r",
											"    pm.expect(response.message.length).to.greaterThan(1);\r",
											"});\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{base_url}}/cards/:cardid/likes",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cards",
										":cardid",
										"likes"
									],
									"variable": [
										{
											"key": "cardid",
											"value": "text"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление лайка с несуществующим в БД id карточки",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Код ответа равен 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка возврата поля message\", () => {\r",
											"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
											"    const response = utils.getData(pm.response.json());\r",
											"    \r",
											"    pm.expect(response.message).to.be.a(\"string\")\r",
											"    pm.expect(response.message.length).to.greaterThan(1);\r",
											"});\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{base_url}}/cards/:cardid/likes",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cards",
										":cardid",
										"likes"
									],
									"variable": [
										{
											"key": "cardid",
											"value": "{{user_id_const}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление лайка у карточки с некорректным id",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Код ответа равен 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка возврата поля message\", () => {\r",
											"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
											"    const response = utils.getData(pm.response.json());\r",
											"\r",
											"    pm.expect(response.message).to.be.a(\"string\")\r",
											"    pm.expect(response.message.length).to.greaterThan(1);\r",
											"});\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/cards/:cardid/likes",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cards",
										":cardid",
										"likes"
									],
									"variable": [
										{
											"key": "cardid",
											"value": "text"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление лайка у карточки с несуществующим в БД id",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Код ответа равен 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка возврата поля message\", () => {\r",
											"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
											"    const response = utils.getData(pm.response.json());\r",
											"\r",
											"    pm.expect(response.message).to.be.a(\"string\")\r",
											"    pm.expect(response.message.length).to.greaterThan(1);\r",
											"});\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/cards/:cardid/likes",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cards",
										":cardid",
										"likes"
									],
									"variable": [
										{
											"key": "cardid",
											"value": "{{user_id_const}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление лайка у карточки",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Код ответа равен 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/cards/:cardid/likes",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cards",
										":cardid",
										"likes"
									],
									"variable": [
										{
											"key": "cardid",
											"value": "{{card_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка отсутствия лайка у карточки после его удаления",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Удаленный лайк не должен присутствовать в карточке\", () => {\r",
											"    const cards = utils.getData(pm.response.json());\r",
											"    const userId = pm.collectionVariables.get(\"user_id\");\r",
											"    const cardId = pm.collectionVariables.get(\"card_id\");\r",
											"    const card = cards?.find((item) => item._id === cardId);\r",
											"\r",
											"    pm.expect(!!card?.likes?.includes(userId)).to.eq(false);\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/cards",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cards"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление карточки",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Код ответа равен 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/cards/:cardid",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cards",
										":cardid"
									],
									"variable": [
										{
											"key": "cardid",
											"value": "{{card_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка отсутствия удаленной карточки в БД",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Удаленной карточки не должно быть в БД\", () => {\r",
											"    const cards = utils.getData(pm.response.json());\r",
											"    const deletedId = pm.collectionVariables.get(\"card_id\");\r",
											"    const hasCard = !!cards?.find((item) => item._id === deletedId);\r",
											"\r",
											"    pm.expect(hasCard).to.eq(false);\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/cards",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cards"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление карточки с некорректным id",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Код ответа равен 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка возврата поля message\", () => {\r",
											"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
											"    const response = utils.getData(pm.response.json());\r",
											"    \r",
											"    pm.expect(response.message).to.be.a(\"string\")\r",
											"    pm.expect(response.message.length).to.greaterThan(1);\r",
											"});\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/cards/:cardid",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cards",
										":cardid"
									],
									"variable": [
										{
											"key": "cardid",
											"value": "text"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление карточки с несуществующим в БД id",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Код ответа равен 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка возврата поля message\", () => {\r",
											"    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ содержит message длинной больше 1 символа\", () => {\r",
											"    const response = utils.getData(pm.response.json());\r",
											"    \r",
											"    pm.expect(response.message).to.be.a(\"string\")\r",
											"    pm.expect(response.message.length).to.greaterThan(1);\r",
											"});\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/cards/:cardid",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cards",
										":cardid"
									],
									"variable": [
										{
											"key": "cardid",
											"value": "{{user_id_const}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}